#!/usr/bin/env perl
# ssserv - ssu perl server
# Copyright(c) 2005-2007 of wave++ (Yuri D'Elia)
# Distributed under GNU LGPL without ANY warranty.
use strict;
use File::Basename qw{basename dirname};
use File::Temp qw{tempfile tempdir};
use File::Path qw{mkpath rmtree};
use Getopt::Std qw{getopts};
use Time::HiRes qw{gettimeofday tv_interval};
use IO::Socket;
require File::Spec;
use threads;
use threads::shared;

use Parse;
use Maps;
use Proto;
use Cksum;


# Some defaults
my $VERSION	= "0.10";
my $INI_PATH	= "ssserv.ini";
my %PARAMS;
my %USER;

# code to handler maps
my %FMAP =
(
  $Proto::GET		=> \&get,
  $Proto::CHECKOUT	=> \&checkOut,
  $Proto::CHECKIN	=> \&checkIn,
  $Proto::LIST		=> \&dirListing,
  $Proto::REVERT	=> \&revert,
  $Proto::DELETE	=> \&delete,
  $Proto::HISTORY	=> \&history,
  $Proto::STATUS	=> \&status,
  $Proto::OPENED	=> \&opened,
  $Proto::LABEL		=> \&label,
  $Proto::TEST		=> \&test,
  $Proto::CKSUM		=> \&ckSum,
  $Proto::ADD		=> \&add,
  $Proto::MONITOR	=> \&monitor,
  $Proto::RECOVER	=> \&recover
);


# shared data/locks
my $output : shared;
my $curprj : shared;
my %counters : shared;
my %cachedPaths : shared;
my %cachedTimes : shared;
my %cachedCksums : shared;


sub fail(@)
{
  $_ = join(" ", @_);
  print STDERR (basename($0) . ": $_\n");
  exit(1);
}

sub msg(@)
{
  $_ = join(" ", @_);
  my @now = localtime(time);

  lock($output);
  printf(STDOUT "%04d-%02d-%02d %02d:%02d:%02d %s@%s: %s\n",
	 $now[5] + 1900, $now[4], $now[3], $now[2], $now[1], $now[0],
	 (defined $USER{USER}? $USER{USER}: "n/a"), $USER{IP}, $_);
}

sub getRelMap($$)
{
  my ($file, $maps) = @_;
  (my $map, my $dir, $file) = getMap($file, $maps);
  ($map && $dir && $file) or return undef;
  return ($dir, $file);
}

sub main()
{
  # command line overrides
  my %flags;
  getopts("f:", \%flags);
  my $ini = $flags{"f"} || $ENV{"SSCONFIG"} || $INI_PATH;

  # initialize the params
  %PARAMS = init($ini);

  # prepare work directories
  $PARAMS{TEMP} = File::Spec->catdir($PARAMS{HOME}, "tmp");
  $PARAMS{WORK} = File::Spec->catdir($PARAMS{HOME}, "wrk");
  mkpath($PARAMS{TEMP});
  mkpath($PARAMS{WORK});
  (-d $PARAMS{TEMP} and -d $PARAMS{WORK}) or
      fail("unable to create work directories");

  # start the server
  server();
}

sub init($)
{
  my ($ini) = @_;

  my %data;
  parse($ini, \%data) or
      fail("cannot find \"$ini\"");

  # check for needed data
  foreach my $param("HOME", "MAP") {
    defined $data{$param} or
	fail("missing parameter \"$param\"");
  }

  # parse mappings
  my $maps = parseMaps(0, $data{"MAP"}) or
      fail("malformed MAP");

  # put data togheter
  return
  (
    PRUNE => (defined($data{"PRUNE"})? $data{"PRUNE"}: 0),
    AUTOREC => (defined($data{"AUTOREC"})? $data{"AUTOREC"}: 1),
    PORT => $data{"PORT"} || $Proto::PORT,
    HOME => $data{"HOME"},
    MAPS => $maps
  );
}

sub server()
{
  # listen
  my $sock = new IO::Socket::INET(
    Type => SOCK_STREAM, Proto => 'tcp', Listen => SOMAXCONN,
    LocalPort => $PARAMS{PORT}, Reuse => 1) or fail($!);

  for(;;)
  {
    # accept a connection
    my ($conn, $data) = $sock->accept();
    msg($!) and next if(!$conn);

    # spawn a child
    my $thread = threads->create("childMain", $conn, $data);
    msg($!) and next if(!$thread);
    $thread->detach();
  }
}

sub childMain($$)
{
  my ($fd, $data) = @_;
  my ($port, $addr) = sockaddr_in($data);
  my $oldFd = select();
  setupFd($fd);

  # NOTE: times is useless on WIN32, use HiRes and count real time instead.
  my $times = [gettimeofday()];
  child($port, $addr);
  addCounter("ssservtimes", tv_interval($times, [gettimeofday()]));

  select($oldFd);
  close($fd);
}

sub child($$)
{
  my ($port, $addr) = @_;
  $USER{IP} = inet_ntoa($addr);
  $USER{PORT} = $port;
  addCounter("connections");

  # perform login immediately
  sendStr($Proto::INFO, encArr($USER{IP}, $VERSION));
  login() or return 0;
  addCounter("logins");

  # main loop
  while(1)
  {
    # fetch the command request
    my ($code, $str) = recvStr();
    $code or last;

    # dispatch
    addCounter("commands");
    my $handler = $FMAP{$code};
    if($handler)
    {
      &$handler($str) or last;
      addCounter("successes");
      ssClean();
    }
    else {
      synFail($code, $str);
    }
  }

  # terminate the session
  logout();
  return 0;
}

# recoverable syntax error
sub synFail(@)
{
  msg("command not understood:", @_);
  return sendStr($Proto::ERROR, "command not understood");
}

# recoverable execution error (exposes the failure)
sub cmdFail($)
{
  msg(@_);
  return sendStr($Proto::ERROR, shift);
}

# unrecoverable local error (hides the failure)
sub intFail($)
{
  msg(@_);
  sendStr($Proto::ERROR, "server failure");
  return 0;
}

sub addCounter($@)
{
  my ($counter, $amount) = @_;
  lock(%counters);
  $counters{$counter} = ($counters{$counter} || 1) + ($amount || 1);
}

sub login()
{
  # send a login request
  sendStr($Proto::LOGIN, "identify");
  my ($user, $pass) = expectCV($Proto::USRPWD, 2);
  unless(defined($user))
  {
    synFail(getErr());
    return 0;
  }

  # propagate parameters
  $USER{USER} = $user;
  $USER{PASS} = $pass;
  my $argUser = ssEscape("-Y$user,$pass");

  # validate the user. as the process is different from standard
  # ss operations, do it manually. Validation is necessary to avoid
  # further "Username/Password" requests even with -I-
  # (for now, use the first available map)
  $USER{SSDIR} = $PARAMS{MAPS}->[0][1];
  my ($tmpFd, $batch) = tempfile(DIR => $PARAMS{TEMP}, SUFFIX => ".bat");
  $tmpFd or intFail("cannot create temporary file");

  # compose the batch
  print $tmpFd qq
  {
    \@echo off
    cd "$PARAMS{TEMP}"
    set "SSDIR=$USER{SSDIR}"
    ss whoami -I- $argUser
  };
  close $tmpFd;

  # fire it up
  open(my $batchFd, "|\"$batch\" 2>NUL >NUL");
  print $batchFd "\n\n";
  my $ret = close($batchFd);
  unlink($batch);
  unless($ret)
  {
    cmdFail("invalid username/password");
    return 0;
  }

  # prepare user environment (for now we assume each further file to be
  # present in the _same_ db, this should be fixed).
  $USER{HOME} = File::Spec->catdir($PARAMS{WORK}, $USER{USER});
  mkpath($USER{HOME});
  $USER{WORK} = tempdir(DIR => $USER{HOME});
  $USER{WORK} or return intFail("cannot setup local environment");

  # everything's ok
  return sendStr($Proto::READY);
}

sub logout()
{
  # remove everything inside the work dir
  rmtree($USER{WORK});
}

# sanitize a string to be suitable in a command
sub sanitize(@)
{
  $_ = join(" ", @_);
  s/\n/ /g;
  s/\s+/ /g;
  return $_;
}

sub ssEscape($)
{
  $_ = shift;

  if(/[\s|&<>^"%]/)
  {
    s/\^/^^/g;
    s/%/^%/g;
    $_ = qq{"$_"};
  }

  return $_;
}

sub ssExec($@)
{
  my ($dir, @args) = @_;

  # prepare the arguments
  foreach(@args) {
    $_ = ssEscape($_);
  }
  my $argList = join(" ", @args);
  my $argUser = ssEscape("-Y$USER{USER},$USER{PASS}");

  # prepare the environment for ss
  my ($tmpFd, $batch) = tempfile(DIR => $PARAMS{TEMP}, SUFFIX => ".bat");
  my ($errFd, $error) = tempfile(DIR => $PARAMS{TEMP});
  unless($tmpFd and $errFd)
  {
    msg("cannot create temporary file/s");
    return undef;
  }
  close($errFd);

  # compose the batch
  print $tmpFd qq
  {
    \@echo off
    cd "$dir"
    set "SSDIR=$USER{SSDIR}"
    ss $argList $argUser
  };
  close $tmpFd;

  # fire it up
  my $times = [gettimeofday()];
  my $output;
  open(my $batchFd, "\"$batch\" 2> \"$error\"|");
  while(<$batchFd>) {
    $output .= $_;
  }
  my $ret = close($batchFd);
  unlink($batch);

  # read errors too
  my $errors;
  open($errFd, "<$error");
  while(<$errFd>) {
    $errors .= $_;
  }
  close($errFd);
  unlink($error);

  addCounter("sstimes", tv_interval($times, [gettimeofday()]));
  return ($ret, $output, $errors);
}

sub ssStdExec(@)
{
  return ssExec($USER{WORK}, @_);
}

sub ssStdTest($)
{
  # test for the presence of a path
  my $rel = shift;

  # physical seems the fastest way
  my ($ret) = ssStdExec("physical", "\$/$rel", "-I-");
  return $ret;
}

sub ssStdDir($)
{
  # test for the presence of a directory/project
  my $rel = shift;

  # Current Project ("cp") seems the fastest way
  my $ret;
  {
    lock($curprj);
    ($ret) = ssStdExec("cp", "\$/$rel", "-I-");
  }
  return $ret;
}

sub ssClean()
{
  # clean the working environment, but not the dir!
  opendir(my $handle, $USER{WORK});
  my @files = grep {!/^\./} readdir($handle);
  closedir($handle);
  foreach(@files) {
    rmtree(File::Spec->catdir($USER{WORK}, $_));
  }
  return 1;
}

sub readFile($)
{
  my ($file) = shift;
  my $buf = "";

  open(my $fd, "<$file") or return undef;
  while(my $line = <$fd>) {
    $buf .= $line;
  }
  close($fd);

  return $buf;
}

sub mTime($)
{
  return (stat(shift))[9];
}

sub getFile($$)
{
  my ($rel, $version) = @_;

  # fetch the file
  my @args = ("get", "\$/$rel", "-W", "-I-Y");
  push(@args, "-V$version") if(defined($version));
  my ($ret, $output, $errors) = ssStdExec(@args);
  $ret or return ($ret, undef, "get: " . sanitize($errors));
  my $buf = readFile(File::Spec->catfile($USER{WORK}, basename($rel)));
  return ($ret, $buf, $!);
}

# return a list of (file checksum, contents, errors), by accessing the shared
# checksum hash cache. cksum is 'undef' when the file has changed and does not
# exist anymore, with errors containing the failed command output. contents is
# 'undef' if the file didn't change since last access (no additional get was
# performed). only the head version is kept, to keep the hash small.
sub peekFile($$)
{
  my ($rel, $version) = @_;
  my $key = "$USER{SSDIR}\0$rel";

  # ensure physical association is not broken while updating the cache
  lock(%cachedPaths);
  addCounter("peeks");

  my $refreshed = 0;
  if(!defined($cachedPaths{$key}))
  {
    # physical filename not known
    my ($ret, $output, $errors) = ssStdExec("physical", "\$/$rel", "-I-");
    $ret or return (undef, undef, "physical: " . sanitize($errors));
    my ($index) = ($output =~ /(\S+)$/);
    my $dataPath = File::Spec->catdir(substr($index, 0, 1), $index);
    $cachedPaths{$key} = $dataPath;
    $refreshed = 1;
  }

  my $dataPath = File::Spec->catfile($USER{SSDIR}, "data", $cachedPaths{$key});
  my $dataTime = mTime($dataPath);
  if(!$dataTime)
  {
    # data file was removed, need to refresh physical association
    delete($cachedPaths{$key});
    delete($cachedTimes{$key});
    delete($cachedCksums{$key});
    addCounter("misses");
    return (undef, undef, "peek: unable to stat physical file") if($refreshed);
    return peekFile($rel, $version);
  }

  if(defined($cachedTimes{$key}) && ($cachedTimes{$key} == $dataTime)
     && !defined($version))
  {
    # no detectable change, head version requested
    addCounter("hits");
    return ($cachedCksums{$key}, undef, undef);
  }

  # file changed or old version requested
  my ($ret, $dataBuf, $errors) = getFile($rel, $version);
  $ret or return (undef, undef, $errors);
  my $dataCksum = cksumBuf($dataBuf);

  if(!defined($version))
  {
    # store new head data
    $cachedTimes{$key} = $dataTime;
    $cachedCksums{$key} = $dataCksum;
  }

  return ($dataCksum, $dataBuf, undef);
}

sub get($)
{
  # check arguments
  my ($path, $arg) = decArr(shift);
  $path or return synFail("expecting a path");

  # decompose arg
  my $cksum;
  my $version;

  if(defined($arg))
  {
    ($cksum, $version) = ($arg =~ /^([^@#]+)?([@#].+)?$/);
    return synFail("bad argument") unless(defined($cksum) || defined($version));

    if(defined($version))
    {
      $version = fixVersion($version);
      return synFail("bad version") unless(defined($version));
    }
  }

  # map and fetch the file
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($dataCksum, $dataBuf, $errors) = peekFile($rel, $version);
  $dataCksum or return cmdFail($errors);

  # check cksum
  if(defined($cksum) && ($dataCksum eq $cksum)) {
    return sendStr($Proto::READY);
  }

  # fetch the file
  if(!defined($dataBuf))
  {
    (my $ret, $dataBuf, $errors) = getFile($rel, $version);
    $ret or return cmdFail($errors);
  }

  sendBuf(basename($rel), $dataBuf) or cmdFail(getErr());
}

sub sendFileCond($$)
{
  # send a file only when needed
  my ($file, $cksum) = @_;
  my $name = basename($file);

  my $buf = readFile($file);
  defined($buf) or return cmdFail($!);

  my $send = (!defined($cksum) || (cksumBuf($buf) ne $cksum));
  ($send? sendBuf($name, $buf): sendStr($Proto::READY)) or cmdFail(getErr());
}

sub checkOut($)
{
  # check arguments
  my ($path, $cksum) = decArr(shift);
  $path or return synFail("expecting a path");

  # map and fetch the file
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($ret, $output, $errors) = ssStdExec("checkout", "\$/$rel", "-I-");
  $ret or return cmdFail("checkout: " . sanitize($errors));

  sendFileCond(File::Spec->catfile($USER{WORK}, basename($rel)), $cksum);
}

sub ssMkPath($)
{
  my $dir = shift;
  my $base = dirname($dir);

  # check if the directory already exists
  return 1 if(ssStdDir($dir));

  # not quite, check parents
  if($base ne File::Spec->curdir()) {
    ssMkPath($base) or return 0;
  }

  # now try to create it
  my ($ret) = ssStdExec("create", "\$/$dir", "-I-");
  return ($ret);
}

sub ssRmPath($)
{
  my $dir = shift;

  # check if the directory is empty
  my ($ret, $output) = ssStdExec("dir", "\$/$dir", "-I-");
  $ret and !parseListing($dir, $output) or return 0;

  # remove the directory
  ($ret) = ssStdExec("delete", "\$/$dir", "-I-");
  $ret or return 1;

  # descent into the parent
  return ssRmPath(dirname($dir));
}

sub fixComment($)
{
  my $comment = shift;
  return "-" if(!defined($comment));
  return $1 if($comment =~ /^[\@\?-](.*)/);
  return $comment;
}

sub fixVersion($)
{
  my $ver = shift;

  if($ver =~ /^#(\d+)$/)
  {
    # handle numerical revs
    return ($1? $1: undef);
  }
  elsif($ver =~ m|^\@(\d{4})/(\d{2})/(\d{2})(?::(\d{2}):(\d{2}):(\d{2}))?$|)
  {
    # handle date/time
    my ($y, $m, $d, $hh, $mm, $ss) = ($1, $2, $3, $4, $5, $6);
    unless(defined($hh)) {
      $hh = $mm = $ss = 0;
    }

    return sprintf("d%02d/%02d/%04d;%02d:%02d:%02d",
		   $d, $m, $y, $hh, $mm, $ss);
  }
  elsif($ver =~ /^\@([a-zA-Z].*)$/)
  {
    # labels
    return "L$1"
  }

  # no match
  return undef;
}

sub add($)
{
  # check arguments
  my ($path, $comment) = decArr(shift);
  $path or return synFail("expecting a path");
  $comment = fixComment($comment);

  # map the path
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");

  # ensure file/path correctness
  return cmdFail("add: file already exists") if(ssStdTest($rel));

  # try to recover first
  my $new = File::Spec->catfile($USER{WORK}, basename($rel));
  my $recovered = 0;

  if($PARAMS{AUTOREC})
  {
    my ($ret) = ssStdExec("recover", "\$/$rel", "-I-");
    if($ret && -f $new)
    {
      # successfully recovered, lock the file
      my ($ret, $output, $errors) = ssStdExec("checkout", "\$/$rel", "-I-");
      $ret or return intFail("add: " . sanitize($errors));
      $recovered = 1;
    }
    elsif($ret)
    {
      # originally a directory... delete it again (now THIS *IS* crappy)
      my ($ret, $output, $errors) = ssStdExec("delete", "\$/$rel", "-I-");
      $ret or return intFail("add: " . sanitize($errors));
      ssClean();
    }
  }

  # fetch the file
  my $dir = dirname($rel);
  ssMkPath($dir) or return intFail("cannot create directory structure");
  sendStr($Proto::READY);
  my ($void, $size) = expectCV($Proto::XFER, 2);
  recvFile($size, $new) or return cmdFail(getErr());

  my $ret;
  my $errors;

  if($recovered)
  {
    # the file was recovered, do a normal checkin
    ($ret, my $output, $errors) =
	ssStdExec("checkin", "\$/$rel", "-I-Y", "-C$comment");
  }
  else
  {
    # before adding we must set the current project (gah!)
    # ensure the current project is retained (lock everything), as other
    # commands may interfere.
    lock($curprj);
    ($ret) = ssStdExec("cp", "\$/$dir", "-I-");
    $ret or return intFail("cannot set current project");
    ($ret, my $output, $errors) =
	ssStdExec("add", $new, "-I-", "-B-", "-C$comment");
  }

  # return status
  return ($ret? sendStr($Proto::READY): cmdFail("add: " . sanitize($errors)));
}

sub checkIn($)
{
  # check arguments
  my ($path, $comment) = decArr(shift);
  $path or return synFail("expecting a path");
  $comment = fixComment($comment);

  # map the path
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");

  # test for the file
  return cmdFail("checkin: file does not exist") unless(ssStdTest($rel));
  sendStr($Proto::READY);

  # fetch the file
  my ($void, $size) = expectCV($Proto::XFER, 2);
  my $new = File::Spec->catfile($USER{WORK}, basename($rel));
  recvFile($size, $new) or return cmdFail(getErr());

  # commit
  my ($ret, $output, $errors) =
      ssStdExec("checkin", "\$/$rel", "-I-Y", "-C$comment");
  $ret or return cmdFail("checkin: " . sanitize($errors));

  return sendStr($Proto::READY);
}

sub parseListing($$)
{
  my ($root, $output) = @_;
  my @files;

  # split for each line first
  my @lines = split(/\n/, $output);
  pop(@lines); pop(@lines);

  my $curdir = undef;
  foreach(@lines)
  {
    if(/^\$\/(.*):$/) {
      $curdir = $1;
    } else {
      if(/^[^\$]/ && (!defined($curdir) || !/ \$\/\Q$curdir\E$/))
      {
	if(defined($curdir)) {
	  push(@files, File::Spec->catdir($curdir, $_));
	} else
	{
	  # a single file was returned
	  push(@files, File::Spec->catdir(dirname($root), $_));
	}
      }
    }
  }

  return @files;
}

sub publicCanon($)
{
  # publicize a path name
  $_ = File::Spec->canonpath(shift);
  s/\\/\//g;
  return $_;
}

sub dirListing($)
{
  my ($path) = decArr(shift);
  $path or return synFail("expecting a path");

  # extended remap
  (my $map, $USER{SSDIR}, my $rel) = getMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($ret, $output) = ssStdExec("dir", "\$/$rel", "-R", "-I-");
  $ret or return cmdFail("invalid path");

  # parse the listing
  my $result = "";
  foreach(parseListing($rel, $output)) {
    $result .= (publicCanon(File::Spec->catdir($map, $_)) . "\n");
  }

  # send the result
  sendBuf("listing", $result) or cmdFail(getErr());
}

sub revert($)
{
  # check arguments
  my ($path) = decArr(shift);
  $path or return synFail("expecting a path");

  # revert the file
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($ret, $output, $errors) =
      ssStdExec("undocheckout", "\$/$rel", "-I-Y", "-W");
  $ret or return cmdFail("revert: " . sanitize($errors));

  # send the actual file
  my $new = File::Spec->catfile($USER{WORK}, basename($rel));
  sendFile($path, $new) or cmdFail(getErr());
}

sub delete($)
{
  # check arguments
  my ($path, $force) = decArr(shift);
  $path or return synFail("expecting a path");
  $force = ($force? "Y": "N");

  # delete the file or project
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($ret, $output, $errors) = ssStdExec("delete", "\$/$rel", "-I-$force");
  $ret or return cmdFail("delete: " . sanitize($errors));

  # prune the hierarchy only if requested
  if($PARAMS{PRUNE})
  {
    my $base = dirname($rel);
    ssRmPath($base) if($base ne File::Spec->curdir());
  }

  return sendStr($Proto::READY);
}

sub history($)
{
  # check arguments
  my ($path, $max) = decArr(shift);
  $path or return synFail("expecting a path");

  # map the path
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");

  # prepare arguments
  $max = int($max);
  my @args = ("history", "\$/$rel", "-I-");
  push(@args, "-#$max") if($max > 0);

  my ($ret, $output, $errors) = ssStdExec(@args);
  $ret or return cmdFail("history: " . sanitize($errors));

  # send the history
  sendBuf("history", $output) or cmdFail(getErr());
}

sub status($)
{
  # check arguments
  my ($path) = decArr(shift);
  $path or return synFail("expecting a path");

  # map the path and fetch the status
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($ret, $output, $errors) = ssStdExec("properties", "\$/$rel", "-I-");
  $ret or return cmdFail("properties: " . sanitize($errors));

  # send the status
  sendBuf("status", $output) or cmdFail(getErr());
}

sub opened($)
{
  # check arguments
  my ($path, $user) = decArr(shift);
  $path or return synFail("expecting a path");

  # map the path
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");

  # prepare arguments
  my @args = ("status", "\$/$rel", "-R", "-I-");
  push(@args, "-U$user") if(defined($user));

  # status seems to return broken return codes
  my ($ret, $output, $errors) = ssStdExec(@args);
  !$errors or return cmdFail("status: " . sanitize($errors));
  $output = "" if($ret);

  # send the status
  sendBuf("opened", $output) or cmdFail(getErr());
}

sub label($)
{
  # check arguments
  my ($path, $label, $arg) = decArr(shift);
  ($path and $label) or return synFail("expecting a path/label");
  ($label =~ /^[a-zA-Z]/) or return synFail("bad label");

  # decompose arg
  my $version;
  my $force = "N";

  if(defined($arg))
  {
    $version = fixVersion($arg) or return synFail("bad version");
    $force = "Y" if($version =~ /^L/);
  }

  # map the path and label the head revision
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");

  my @args = ("label", "\$/$rel", "-I-$force", "-L$label");
  push(@args, "-V$version") if(defined($version));
  my ($ret, $output, $errors) = ssStdExec(@args);
  $ret or return cmdFail("label: " . sanitize($errors));

  return sendStr($Proto::READY);
}

sub test($)
{
  # check for existence of a file
  my ($path) = decArr(shift);
  $path or return synFail("expecting a path");

  # map the path
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");

  # check if the file exists first
  my $ret = ssStdTest($rel);
  return sendStr($Proto::READY, $Proto::FREE) unless($ret);

  # file/dir
  $ret = ssStdDir($rel);
  return sendStr($Proto::READY, ($ret? $Proto::FILE: $Proto::DIR));
}

sub ckSum($)
{
  # return the checksum of a file
  my ($path) = decArr(shift);
  $path or return synFail("expecting a path");

  # map and fetch the checksum
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($dataCksum, $dataBuf, $errors) = peekFile($rel, undef);
  $dataCksum or return cmdFail($errors);

  # return the checksum
  return sendStr($Proto::READY, encArr($dataCksum));
}

sub recover($)
{
  # check arguments
  my ($path) = decArr(shift);
  $path or return synFail("expecting a path");

  # recover the file
  ($USER{SSDIR}, my $rel) = getRelMap($path, \@{$PARAMS{MAPS}});
  $rel or return cmdFail("cannot map \"$path\"");
  my ($ret, $output, $errors) =
      ssStdExec("recover", "\$/$rel", "-I-", "-W");
  $ret or return cmdFail("recover: " . sanitize($errors));

  return sendStr($Proto::READY);
}

sub monitor($)
{
  my $buf = "";

  lock(%counters);

  # immediate values
  while(my ($counter, $value) = each(%counters)) {
    $buf .= "$counter=$value\n";
  }

  # derived values
  if(defined($counters{"peeks"}) && defined($counters{"hits"})) {
    $buf .= sprintf("hitrate=%.3f\n", $counters{"hits"} / $counters{"peeks"});
  }

  # send the output
  sendBuf("monitor", $buf) or cmdFail(getErr());
}


main();
